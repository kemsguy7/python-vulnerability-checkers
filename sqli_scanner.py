import requests
import re
from urllib.parse import urlparse
from bs4 import BeautifulSoup

class Scanner:
    # ... (other methods and initialization)

    # New function to test for SQL injection vulnerabilities in form fields
    def test_sqli_in_form(self, form, url):
        sqli_test_payload = "1' OR '1'='1"  # SQL injection test payload
        response = self.submit_form(form, sqli_test_payload, url)
        return "You have an error in your SQL syntax" in response.content

    # New function to test for SQL injection vulnerabilities in URLs
    def test_sqli_in_link(self, url):
        sqli_test_payload = "1' OR '1'='1"  # SQL injection test payload
        url = url + "?id=" + sqli_test_payload
        response = self.session.get(url)
        return "You have an error in your SQL syntax" in response.content


# THE CODES BELOW WILL GO TO THE SECOND VULNERABILITY SCANNER SCRIPT THAT IMPORTS THE SCANNER2.PY

#!/usr/bin/env python

import scanner2

target_url = "http://192.168.63.131/dvwa/"
links_to_ignore = ["http://192.168.63.131/dvwa/logout.php"]
data_dict = {"username": "admin", "password": "password", "Login": "submit"}

vuln_scanner = scanner2.Scanner(target_url, links_to_ignore)
vuln_scanner.session.post("http://192.168.63.131/dvwa/login.php", data=data_dict)
vuln_scanner.crawl()
vuln_scanner.run_scanner()

# Add code to test for SQL injection vulnerabilities
for link in vuln_scanner.target_links:
    print("\nTesting SQLi in link: " + link)
    is_vulnerable_to_sqli = vuln_scanner.test_sqli_in_link(link)
    if is_vulnerable_to_sqli:
        print("[*****] SQL Injection Vulnerability Discovered in: " + link)

for form in vuln_scanner.target_forms:
    print("\nTesting SQLi in form in: " + vuln_scanner.target_url)
    is_vulnerable_to_sqli = vuln_scanner.test_sqli_in_form(form, vuln_scanner.target_url)
    if is_vulnerable_to_sqli:
        print("\n[*****] SQL Injection Vulnerability Discovered in form on: " + vuln_scanner.target_url)
